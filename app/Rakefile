# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require_relative 'config/application'
require 'smarter_csv'
require 'hexapdf'

Rails.application.load_tasks

namespace :db do
  desc "Generate seed from csv"
  task :gen_seed do
    Dir.glob("db/fixtures/*.csv") do |filename|
      puts "Generating from #{filename}"
      basename = File.basename(filename, ".*")
      class_name = basename.singularize.capitalize
      SeedFu::Writer.write("db/fixtures/#{basename}.rb", class_name: class_name) do |writer|
        SmarterCSV.process(filename, {col_sep: '|'}) do |chunk|
          chunk.each do |row|
            # tmp = row.map do |col_name, value|
            #   col_name.match(/\w+\(fk:(\w+)\)/) do |fk_ref|
            #     klass_name = fk_ref[1].singularize.camelize
            #     value = "#{klass_name}.find_by(name: '#{value}')"
            #   end
            #   col_name = col_name.to_s.partition(/\(fk:(\w+)\)/)[0].to_sym
            #   [col_name, value]
            # end
            writer.add(row)
          end
        end
      end
    end
  end
end

namespace :plantuml do
  desc "Inspect models"
  task :print_all do
    Zeitwerk::Loader.eager_load_all
    puts "Rails app loaded"
    File::open "diagramm.puml", "w" do |f|
      f.puts "@startuml"
      f.puts ""
      f.puts "hide circle"
      f.puts "skinparam linetype ortho"
      f.puts "skinparam shadowing false"
      f.puts "skinparam monochrome true"
      f.puts "skinparam DefaultFontName Helvetica"
      f.puts "skinparam DefaultFontSize 15"
      f.puts ""
      ApplicationRecord.descendants.each do |c|
        f.puts "entity #{c} {"
        f.puts c.column_names
        f.puts "}"
      end
      f.puts ""
      ApplicationRecord.descendants.each do |c|
        c.reflect_on_all_associations(:has_one).each do |a|
          f.puts "#{c} ||--|| #{a.klass.name}"
        end
        # c.reflect_on_all_associations(:belongs_to).each do |a|
        #   f.puts "#{c} }o--|| #{a.klass.name}"
        # end
        c.reflect_on_all_associations(:has_many).each do |a|
          f.puts "#{c} ||--o{ #{a.klass.name}"
        end
      end
      f.puts ""
      f.puts "@enduml"
    end

  end
end
